## Include necessary geometric utilities
$include "geo.core";
$include "geo.utils";

<void> main() {
    ## Declarative statements
    num choice = 0;
    num radius = 0;
    point center(0, 0);

    write ~ "Select a shape to calculate area:";
    write ~ "1. Circle";
    write ~ "2. Rectangle";
    write ~ "3. Triangle";
    read ~ choice;

    switch(choice) {
        case 1: {
            write ~ "Enter radius of the circle:";
            read ~ radius;
            circle c(center, radius);
            write ~ "Area of Circle = " ~ (3.14 * radius * radius);
            stop;
        }
        case 2: {
            num length = 0;
            num width = 0;
            write ~ "Enter length and width of the rectangle:";
            read ~ length;
            read ~ width;
            write ~ "Area of Rectangle = " ~ (length * width);
            stop;
        }
        case 3: {
            num base = 0;
            num height = 0;
            write ~ "Enter base and height of the triangle:";
            read ~ base;
            read ~ height;
            write ~ "Area of Triangle = " ~ (0.5 * base * height);
            stop;
        }
        default: {
            write ~ "Invalid choice!";
            stop;
        }
    }

    ## Compound statements
    num x = 10;
    num y = 20;

    if (x > y) {
        write ~ "x is greater than y";
    } elif (y >= x) {
        write ~ "y is greater than or equal to x";
    }

    loop(num i = 0; i < 5; i++) {
        write ~ "i = " ~ i;
    }

    num n = 5;
    loop(n > 0) {
        write ~ "n = " ~ n;
        n--;
    }

    {
        num a = 5;
        num b = 10;

        if (a < b) {
            if (b > 0) {
                write ~ "b is positive";
            }
            write ~ "a is smaller than b";
        }
    }

    ## Expression statements
    num result = (5 + 3) * 2;
    write ~ "Result of expression = " ~ result;

    ## Labeled statements
    label1:
    {write ~ "Execution reached label1.";

    if (choice == 1) {
        goto label1;
    }
    }   
    label2:
    {write ~ "Execution reached label2.";
    goto end;
    }
    label3:
    {write ~ "Execution reached label3.";}

    end:
    {write ~ "Program execution finished.";}
    return;
}
